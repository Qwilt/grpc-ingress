apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: grpc-backendconfig
spec:
  healthCheck:
    type: HTTP
    requestPath: /
    port: 8080

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/app-protocols: '{"grpc":"HTTP2"}'
    cloud.google.com/neg: '{"ingress":true}'
    cloud.google.com/backend-config: '{"ports": {"grpc":"grpc-backendconfig"}}'
  labels:
    app: grpcserver
  name: grpcserver
spec:
  ports:
    - name: grpc
      port: 443
      protocol: TCP
      targetPort: 8443
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: grpcserver
  type: NodePort
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: grpcserver
  annotations:
    networking.gke.io/managed-certificates: grpc-cert

spec:
  backend:
    serviceName: grpcserver
    servicePort: 443
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: grpc-cert
spec:
  domains:
    - <my domain>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grpcserver
  name: grpcserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpcserver
  template:
    metadata:
      labels:
        app: grpcserver
    spec:
      containers:
      - image: <my docker image>
        imagePullPolicy: Always
        name: grpcserver
        ports:
        - containerPort: 8443
          name: grpc
          protocol: TCP
        - containerPort: 8080
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
      securityContext: {}